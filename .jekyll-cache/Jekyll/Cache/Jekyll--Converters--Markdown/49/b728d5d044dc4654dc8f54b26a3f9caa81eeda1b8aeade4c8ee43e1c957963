I"`p<p>One of the neat features of the GNU Debugger is the support for running python scripts in the GDB environment. This is helpful for logging and automating debug sessions.
In the gdb environment we run <code class="language-plaintext highlighter-rouge">pi</code> to launch an interactive python session.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(gdb) pi
&gt;&gt;&gt; gdb.breakpoints()
(&lt;gdb.Breakpoint object at 0x7f78b0c8e418&gt;,)

&gt;&gt;&gt; gdb.execute("info inferiors")
  Num  Description       Executable        
* 1    process 3850      /home/hema/C_progs/a.out 

&gt;&gt;&gt; gdb.execute("info shared")
From                To                  Syms Read   Shared Object Library
0x00007ffff7ddab00  0x00007ffff7df55b0  Yes         /lib64/ld-linux-x86-64.so.2
0x00007ffff7bc19f0  0x00007ffff7bce471  Yes         /lib/x86_64-linux-gnu/libpthread.so.0
0x00007ffff7812520  0x00007ffff795ae03  Yes         /lib/x86_64-linux-gnu/libc.so.6

&gt;&gt;&gt; gdb.solib_name(0x00007ffff78125ff)
'/lib/x86_64-linux-gnu/libc.so.6'
</code></pre></div></div>
<p>You can read more about it on their online docs. <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Python-API.html#Python-API"> Python-GDB API </a></p>

<p>Now before diving into the example, I would like to mention about GDB’s powerful utility to set thread-specific breakpoints, which means you can choose which thread is allowed to hit a breakpoint.
The syntax is simple</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(gdb) b &lt;breakpoint_location&gt; thread &lt;thread_number&gt;
</code></pre></div></div>
<p>Now let’s consider a simple multi threaded program.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;pthread.h&gt;
</span>
<span class="kt">int</span> <span class="nf">thread_echo</span><span class="p">(</span><span class="kt">int</span> <span class="n">thread_num</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">//Nothing to do here</span>
	<span class="k">return</span> <span class="mi">100</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="o">*</span> <span class="nf">thread_func</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">num</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="o">*</span><span class="n">echo_arg</span><span class="p">;</span>
	<span class="n">echo_arg</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">num</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="n">thread_echo</span><span class="p">(</span><span class="o">*</span><span class="n">echo_arg</span><span class="p">);</span>	
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">pthread_t</span> <span class="n">threads</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">arg</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
	
	<span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">arg</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
		<span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">threads</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="nb">NULL</span><span class="p">,</span><span class="n">thread_func</span><span class="p">,</span><span class="o">&amp;</span><span class="n">arg</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
	<span class="p">}</span>
	<span class="n">pthread_join</span><span class="p">(</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Now suppose we would like to log the entries to <code class="language-plaintext highlighter-rouge">thread_echo</code> function in a thread-specific manner. We can do this by setting a breakpoint at the function thread-wise and collect the arguments and return value whenever it is hit via a python script.</p>

<p>GDB provides a general event facility so that Python code can be notified of various state changes, particularly changes that occur in the inferior.</p>

<p>In order to be notified of an event, you must register an event handler with an event registry.
A stop event indicates that the inferior has stopped.
A stop event handler is used to provide the user an option to stop the logging and change the thread selection.
Here I have tested this script on a ARM v7 based board</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
	<span class="kn">import</span> <span class="nn">gdb</span>
<span class="k">except</span> <span class="nb">ImportError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
	<span class="k">raise</span> <span class="nb">ImportError</span><span class="p">(</span><span class="s">"This script must be run in GDB: "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="n">logFileName</span> <span class="o">=</span> <span class="s">"./multithread_log.txt"</span>
<span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">def</span> <span class="nf">stop_handler</span> <span class="p">(</span><span class="n">event</span><span class="p">):</span>
	<span class="k">global</span> <span class="n">flag</span>
	<span class="k">print</span><span class="p">(</span><span class="s">"thread %s"</span> <span class="o">%</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">inferior_thread</span><span class="p">))</span>
	<span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">event</span><span class="p">,</span><span class="n">gdb</span><span class="p">.</span><span class="n">SignalEvent</span><span class="p">):</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"event stop signal %s"</span> <span class="o">%</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">stop_signal</span><span class="p">))</span>
		<span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="n">stop_signal</span> <span class="o">==</span> <span class="s">'SIGINT'</span><span class="p">:</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"process got interrupted"</span><span class="p">)</span>
			<span class="n">resp</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">"continue logging ? (y/n)"</span><span class="p">)</span>
			<span class="k">if</span> <span class="n">resp</span> <span class="o">==</span> <span class="s">'n'</span><span class="p">:</span>
				<span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span>
			<span class="k">else</span><span class="p">:</span>
				<span class="n">set_breakpoints</span><span class="p">()</span>
				<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"c"</span><span class="p">)</span>

<span class="n">gdb</span><span class="p">.</span><span class="n">events</span><span class="p">.</span><span class="n">stop</span><span class="p">.</span><span class="n">connect</span> <span class="p">(</span><span class="n">stop_handler</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ConsoleColorCodes</span><span class="p">:</span>
	<span class="n">RED</span> <span class="o">=</span> <span class="s">'</span><span class="se">\033</span><span class="s">[91m'</span>
	<span class="n">BLUE</span> <span class="o">=</span> <span class="s">'</span><span class="se">\033</span><span class="s">[94m'</span>
	<span class="n">YELLOW</span> <span class="o">=</span> <span class="s">'</span><span class="se">\033</span><span class="s">[93m'</span>
	<span class="n">END</span> <span class="o">=</span> <span class="s">'</span><span class="se">\033</span><span class="s">[0m'</span>

<span class="k">class</span> <span class="nc">Utility</span><span class="p">:</span>
	<span class="o">@</span><span class="nb">staticmethod</span>
	<span class="k">def</span> <span class="nf">writeColorMessage</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">colorCode</span><span class="p">):</span>
		<span class="k">print</span><span class="p">(</span><span class="n">colorCode</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="n">ConsoleColorCodes</span><span class="p">.</span><span class="n">END</span><span class="p">)</span>

	<span class="o">@</span><span class="nb">staticmethod</span>
	<span class="k">def</span> <span class="nf">writeMessage</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
		<span class="n">Utility</span><span class="p">.</span><span class="n">writeColorMessage</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">ConsoleColorCodes</span><span class="p">.</span><span class="n">BLUE</span><span class="p">)</span>

	<span class="o">@</span><span class="nb">staticmethod</span>
	<span class="k">def</span> <span class="nf">writeErrorMessage</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
		<span class="n">Utility</span><span class="p">.</span><span class="n">writeColorMessage</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">ConsoleColorCodes</span><span class="p">.</span><span class="n">RED</span><span class="p">)</span>

	<span class="o">@</span><span class="nb">staticmethod</span>
	<span class="k">def</span> <span class="nf">logInfoMessage</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
		<span class="k">global</span> <span class="n">logFileName</span>
		<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">logFileName</span><span class="p">),</span> <span class="s">'a'</span><span class="p">)</span> <span class="k">as</span> <span class="n">logFile</span><span class="p">:</span>
			<span class="n">logFile</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">message</span><span class="p">))</span>

	<span class="o">@</span><span class="nb">staticmethod</span>
	<span class="k">def</span> <span class="nf">writeInfoMessage</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
		<span class="n">Utility</span><span class="p">.</span><span class="n">logInfoMessage</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
		<span class="n">Utility</span><span class="p">.</span><span class="n">writeColorMessage</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">ConsoleColorCodes</span><span class="p">.</span><span class="n">RED</span><span class="p">)</span>

	<span class="o">@</span><span class="nb">staticmethod</span>
	<span class="k">def</span> <span class="nf">convertToHexString</span><span class="p">(</span><span class="n">val</span><span class="p">):</span>
		<span class="k">return</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">))</span>

<span class="n">Functions</span> <span class="o">=</span> <span class="p">[</span><span class="s">"thread_echo"</span><span class="p">]</span>
<span class="n">thread_echo_Args</span> <span class="o">=</span> <span class="p">[</span><span class="s">"thread number"</span><span class="p">]</span>

<span class="n">max_callstack_depth</span> <span class="o">=</span> <span class="mi">16</span>

<span class="k">def</span> <span class="nf">get_callstack</span><span class="p">():</span>
	<span class="n">ret</span> <span class="o">=</span> <span class="p">[]</span>
	<span class="n">depth</span> <span class="o">=</span> <span class="mi">1</span>
	<span class="n">frame</span> <span class="o">=</span> <span class="n">gdb</span><span class="p">.</span><span class="n">selected_frame</span><span class="p">()</span>
	<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">frame</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span> <span class="n">depth</span> <span class="o">&lt;=</span> <span class="n">max_callstack_depth</span> <span class="p">):</span>
			<span class="n">current_frame_name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">name</span><span class="p">())</span>
			<span class="n">ret</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">current_frame_name</span><span class="p">)</span>
			<span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">.</span><span class="n">older</span><span class="p">()</span>
			<span class="n">depth</span> <span class="o">+=</span> <span class="mi">1</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="n">gdb</span><span class="p">.</span><span class="n">Frame</span><span class="p">.</span><span class="n">select</span> <span class="p">(</span> <span class="n">gdb</span><span class="p">.</span><span class="n">newest_frame</span><span class="p">()</span> <span class="p">)</span>
			<span class="k">return</span> <span class="n">ret</span>

<span class="k">def</span> <span class="nf">get_return_value</span><span class="p">():</span>
	<span class="n">ret</span> <span class="o">=</span> <span class="s">""</span>
	<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"finish"</span><span class="p">)</span>
	<span class="n">ret</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">gdb</span><span class="p">.</span><span class="n">parse_and_eval</span><span class="p">(</span><span class="s">"$r0"</span><span class="p">))</span>
	<span class="k">return</span> <span class="n">ret</span>

<span class="k">def</span> <span class="nf">get_argument</span> <span class="p">(</span><span class="n">counter</span><span class="p">):</span>
	<span class="n">index</span> <span class="o">=</span> <span class="n">counter</span> <span class="o">-</span> <span class="mi">1</span>
	<span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">gdb</span><span class="p">.</span><span class="n">parse_and_eval</span><span class="p">(</span><span class="s">"$r"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">)))</span>

<span class="k">def</span> <span class="nf">append_callstack</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">callstack</span><span class="p">):</span>
	<span class="n">ret</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">target</span><span class="p">)</span> <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">callstack : "</span>
	<span class="k">for</span> <span class="n">callstack_frame</span> <span class="ow">in</span> <span class="n">callstack</span><span class="p">:</span>
		<span class="n">ret</span> <span class="o">+=</span> <span class="s">"</span><span class="se">\n\t</span><span class="s">"</span>
		<span class="n">ret</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="n">callstack_frame</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">ret</span>

<span class="k">def</span> <span class="nf">set_breakpoints</span><span class="p">():</span>
	<span class="k">global</span> <span class="n">flag</span>
	<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"info threads"</span><span class="p">)</span>
	<span class="k">print</span><span class="p">(</span><span class="s">"choose thread to log"</span><span class="p">)</span>
	<span class="n">thread_num</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">()</span>
	<span class="k">if</span> <span class="n">thread_num</span> <span class="o">==</span> <span class="s">'q'</span><span class="p">:</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"stop log"</span><span class="p">)</span>
		<span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span>
		<span class="k">return</span>
	<span class="c1"># Remove breakpoints
</span>	<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"delete breakpoints"</span><span class="p">)</span>

	<span class="c1"># Setup breakpoints for memory functions
</span>	<span class="k">for</span> <span class="n">Function</span> <span class="ow">in</span> <span class="n">Functions</span><span class="p">:</span>
		<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"b "</span> <span class="o">+</span> <span class="n">Function</span> <span class="o">+</span> <span class="s">" thread "</span> <span class="o">+</span> <span class="n">thread_num</span> <span class="p">)</span>
		<span class="k">print</span><span class="p">(</span><span class="s">"breakpoints set"</span><span class="p">)</span>

<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"set confirm off"</span><span class="p">)</span>
<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"set pagination off"</span><span class="p">)</span>
<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"set breakpoint pending on"</span><span class="p">)</span>
<span class="n">backtrace_limit_command</span> <span class="o">=</span> <span class="s">"set backtrace limit "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">max_callstack_depth</span><span class="p">)</span>
<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="n">backtrace_limit_command</span><span class="p">)</span>
<span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"b main"</span><span class="p">)</span>
<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"r"</span><span class="p">)</span>
<span class="n">set_breakpoints</span><span class="p">()</span>
<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"i b"</span><span class="p">)</span>
<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"c"</span><span class="p">)</span>

<span class="k">while</span> <span class="n">flag</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
	<span class="k">print</span><span class="p">(</span><span class="s">"entered while loop"</span><span class="p">)</span>
	<span class="k">try</span><span class="p">:</span>
		<span class="n">frame</span> <span class="o">=</span> <span class="n">gdb</span><span class="p">.</span><span class="n">selected_frame</span><span class="p">()</span>
	<span class="k">except</span><span class="p">:</span>
		<span class="n">set_breakpoints</span><span class="p">()</span>
		<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"c"</span><span class="p">)</span>
	<span class="k">print</span><span class="p">(</span><span class="s">"current frame: "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">name</span><span class="p">()))</span>
	<span class="n">current_frame_name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">name</span><span class="p">())</span>

	<span class="c1">##########################################################################
</span>	<span class="c1">#MAIN
</span>	<span class="k">if</span> <span class="s">"main"</span> <span class="ow">in</span> <span class="n">current_frame_name</span><span class="p">:</span>
		<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"cont"</span><span class="p">)</span>
	<span class="c1">##########################################################################
</span>	<span class="c1">#EXIT
</span>	<span class="k">if</span> <span class="s">"exit"</span> <span class="ow">in</span> <span class="n">current_frame_name</span><span class="p">:</span>
		<span class="n">Utility</span><span class="p">.</span><span class="n">writeInfoMessage</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
		<span class="k">break</span>
	<span class="c1">##########################################################################
</span>
	<span class="k">if</span> <span class="s">"thread_echo"</span> <span class="ow">in</span> <span class="n">current_frame_name</span><span class="p">:</span>
		<span class="n">message</span> <span class="o">=</span> <span class="s">"</span><span class="se">\n</span><span class="s">type : thread_echo ,"</span>

		<span class="n">counter</span> <span class="o">=</span> <span class="mi">1</span>
		<span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">thread_echo_Args</span><span class="p">:</span>
			<span class="n">message</span> <span class="o">+=</span> <span class="s">" arg"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span> <span class="o">+</span> <span class="s">"  : "</span>
			<span class="n">message</span> <span class="o">+=</span> <span class="n">get_argument</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span>
			<span class="n">message</span> <span class="o">+=</span> <span class="s">","</span>
			<span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

		<span class="n">callstack</span> <span class="o">=</span> <span class="n">get_callstack</span><span class="p">()</span>

		<span class="n">address</span> <span class="o">=</span> <span class="n">Utility</span><span class="p">.</span><span class="n">convertToHexString</span><span class="p">(</span><span class="n">get_return_value</span><span class="p">())</span>
		<span class="n">message</span> <span class="o">+=</span> <span class="s">" return value : "</span> <span class="o">+</span> <span class="n">address</span>
		<span class="n">message</span> <span class="o">+=</span> <span class="s">","</span>
		<span class="c1"># append callstack at the end
</span>		<span class="n">message</span> <span class="o">=</span> <span class="n">append_callstack</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">callstack</span><span class="p">)</span>
		<span class="c1"># Continue
</span>		<span class="n">Utility</span><span class="p">.</span><span class="n">writeInfoMessage</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
		<span class="n">gdb</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"cont"</span><span class="p">)</span>
<span class="n">Utility</span><span class="p">.</span><span class="n">writeMessage</span><span class="p">(</span><span class="s">'DEBUGEE EXITING'</span><span class="p">)</span>
</code></pre></div></div>

<p>Here is a sample session.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Breakpoint 3, 0x0001050c in thread_echo ()
thread None
entered while loop
current frame: thread_echo
0x00010558 in thread_func ()
thread None

type : thread_echo , arg1  : 1, return value : 0x64,
callstack :
        thread_echo
        thread_func
        start_thread
        None

Breakpoint 3, 0x0001050c in thread_echo ()
thread None
entered while loop
current frame: thread_echo
0x00010558 in thread_func ()
thread None

type : thread_echo , arg1  : 1, return value : 0x64,
callstack :
        thread_echo
        thread_func
        start_thread
        None
		
^C
Program received signal SIGINT, Interrupt.
[Switching to Thread 0x75e3d460 (LWP 1367)]
0x0001050c in thread_echo ()

event stop signal SIGINT
process got interrupted
continue logging ? (y/n)y
  Id   Target Id         Frame
  6    Thread 0x74e3d460 (LWP 1370) "a.out" 0x0001050c in thread_echo ()
  5    Thread 0x7563d460 (LWP 1368) "a.out" 0x00010510 in thread_echo ()
* 4    Thread 0x75e3d460 (LWP 1367) "a.out" 0x0001050c in thread_echo ()
  3    Thread 0x7663d460 (LWP 1366) "a.out" 0x0001050c in thread_echo ()
  2    Thread 0x76e3d460 (LWP 1364) "a.out" 0x0001050c in thread_echo ()
  1    Thread 0x76ff7000 (LWP 1361) "a.out" 0x76f87274 in pthread_join (threadid=&lt;optimized out&gt;, thread_return=0x0) at pthread_join.c:92
choose thread to log
5
Breakpoint 4 at 0x1050c
breakpoints set
[Switching to Thread 0x7563d460 (LWP 1368)]

Breakpoint 4, 0x0001050c in thread_echo ()
thread None
entered while loop
current frame: thread_echo
0x00010558 in thread_func ()
thread None

type : thread_echo , arg1  : 3, return value : 0x64,
callstack :
        thread_echo
        thread_func
        start_thread
        None

Breakpoint 4, 0x0001050c in thread_echo ()
thread None
entered while loop
current frame: thread_echo
0x00010558 in thread_func ()
thread None

type : thread_echo , arg1  : 3, return value : 0x64,
callstack :
        thread_echo
        thread_func
        start_thread
        None
</code></pre></div></div>

<p>And finally the multithread_log.txt file</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type : thread_echo , arg1  : 1, return value : 0x64,
callstack :
        thread_echo
        thread_func
        start_thread
        None
type : thread_echo , arg1  : 1, return value : 0x64,
callstack :
        thread_echo
        thread_func
        start_thread
        None
type : thread_echo , arg1  : 3, return value : 0x64,
callstack :
        thread_echo
        thread_func
        start_thread
        None
type : thread_echo , arg1  : 3, return value : 0x64,
callstack :
        thread_echo
        thread_func
        start_thread
        None
</code></pre></div></div>

:ET